
#!/usr/bin/env python

""" Interface to the marbl_settings_class object
"""

class MARBL_settings_for_POP_class(object):
    def __init__(self, marbl_dir, caseroot, srcroot, ocn_grid, not_startup):

        import os
        self._marbl_dir = marbl_dir

        # Set up arguments for marbl_settings_class constructor
        MARBL_args = dict()

        # User can put default_values.json in SourceMods, otherwise use file provided by MARBL
        MARBL_args["default_settings_file"] = os.path.join(caseroot,"SourceMods","src.pop","default_settings.json")
        if not os.path.isfile(MARBL_args["default_settings_file"]):
            MARBL_args["default_settings_file"] = os.path.join(marbl_dir, "autogenerated_src", "default_settings.json")

        # User can modify user_nl_marbl in caseroot
        MARBL_args["input_file"] = os.path.join(caseroot, "user_nl_marbl")
        if not os.path.isfile(MARBL_args["input_file"]):
            MARBL_args["input_file"] = None

        # Specify grid
        if ocn_grid == "gx3v7":
            MARBL_args["grid"] = "CESM_x3"
        else:
            MARBL_args["grid"] = "CESM_x1"

        # If not a startup run, MARBL may want initial bury coefficient from restart file
        if not_startup:
            MARBL_args["saved_state_vars_source"] = "GCM"

        # User can put MARBL_settings_file_class.py in SourceMods, otherwise use file provided by MARBL
        self._settings_class_dir = os.path.join(caseroot, "SourceMods", "src.pop")
        if os.path.isfile(os.path.join(self._settings_class_dir, "MARBL_settings_file_class.py")):
            MARBL_args["settings_class_dir"] = self._settings_class_dir
        else:
            self._settings_class_dir = None

        # import MARBL_tools
        MARBL_settings_class = _get_MARBL_settings_class(self._marbl_dir, self._settings_class_dir)

        # Generate settings object
        self._marbl_settings = MARBL_settings_class(**MARBL_args)

    ################################################################################
    #                             PUBLIC CLASS METHODS                             #
    ################################################################################

    def get_MARBL_NT(self):
        """ Return tracer count given MARBL settings
        """
        return self._marbl_settings.get_tracer_cnt()

    #######################################

    def write_settings_file(self, settings_file_out):
        """ Write a settings file containing all MARBL settings
        """
        from MARBL_tools import generate_settings_file
        generate_settings_file(self._marbl_settings, settings_file_out)

################################################################################
#                            PRIVATE MODULE METHODS                            #
################################################################################

def _get_MARBL_settings_class(marbl_dir, settings_class_dir):
    import sys
    sys.path.append(marbl_dir)
    if settings_class_dir == None:
        from MARBL_tools import MARBL_settings_file_class
    else:
        import imp
        import logging
        logger = logging.getLogger(__name__)
        logging.info('Importing MARBL_settings_file_class.py from %s' % settings_class_dir)
        settings_class_module = settings_class_dir+'/MARBL_settings_file_class.py'
        if os.path.isfile(settings_class_module):
            MARBL_settings_file_class = imp.load_source('MARBL_settings_file_class', settings_class_module)
        else:
            logger.error('Can not find %s' % settings_class_module)
            sys.exit(1)

    return MARBL_settings_file_class.MARBL_settings_class