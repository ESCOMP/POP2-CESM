#!/usr/bin/env python

""" Convert MARBL_diagnostics file to tavg_contents
"""

#######################################

def _parse_args():
    """ Parse command line arguments
    """

    import argparse

    parser = argparse.ArgumentParser(description="Generate POP tavg contents from MARBL diagnostics",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    # Command line argument to point to MARBL diagnostics input file (required!)
    parser.add_argument('-i', '--MARBL_diagnostics_in', action='store', dest='MARBL_diagnostics_in',
                        required=True, help='File generated by MARBL_generate_diagnostics_file')

    # Command line arguments for the different streams to use (low, medium, high)
    parser.add_argument('-l', '--low_frequency_stream', action='store', dest='low_frequency_stream',
                        type=int, default= 0, help='Stream to put low frequency output into (required if not lMARBL_tavg_all)')

    parser.add_argument('-m', '--medium_frequency_stream', action='store', dest='medium_frequency_stream',
                        type=int, default= 0, help='Stream to put medium frequency output into (required if not lMARBL_tavg_all)')

    parser.add_argument('-g', '--high_frequency_stream', action='store', dest='high_frequency_stream',
                        type=int, default= 0, help='Stream to put high frequency output into (required if not lMARBL_tavg_all)')

    # Command line argument to point to tavg_contents output file (None => write to stdout)
    parser.add_argument('-o', '--tavg_contents_out', action='store', dest='tavg_contents_out',
                        default=None, help='Location of tavg_contents file (None => stdout)')

    # Should all MARBL diagnostics be included in the first tavg stream?
    parser.add_argument('-t', '--lMARBL_tavg_all', action='store', dest='lMARBL_tavg_all',
                        type=bool, default=False, help="Put all MARBL diagnostics in stream number 1")

    # Should lines be appended to tavg_contents_out instead of clobbering?
    parser.add_argument('-a', '--append', action='store', dest='append', default=False,
                        type=bool, help='Append output to tavg_contents_out instead of clobbering')

    return parser.parse_args()

#######################################

def _parse_line(line_in):
    """ Take a line of input from the MARBL diagnostic output and return both
        variable name and frequency. Lines that are commented out or empty
        should return None for both varname and frequency.

        Frequency is always returned as a list, although it often has just one
        element.
    """
    line_loc = line_in.split('#')[0].strip()
    # Return None, None if line is empty
    if len(line_loc) == 0:
        return None, None, None

    logger = logging.getLogger("__name__")
    line_split = line_loc.split(':')
    if len(line_split) == 1:
        logger.error("Can not determine frequency and operator from following line: '%s'" % line_in)
        sys.exit(1)
    freq = []
    op = []
    for freq_op in line_split[1].split(','):
        freq_op_split = freq_op.strip().split('_')
        if len(freq_op_split) != 2:
            logger.error("Can not determine frequency and operator from following entry: '%s'" % line_split[1])
            return None, None, None
        freq.append(freq_op_split[0])
        op.append(freq_op_split[1])
    return line_split[0].strip(), freq, op

#######################################

def _get_freq(frequency, frequency_streams):
    """ Convert MARBL frequency ('never', 'low', 'medium', 'high') to POP streams.
        Note that frequency_streams must be a list of length 3, containing low, medium,
        and high frequency stream numbers (in that order)
    """
    freq_loc = frequency.strip().lower()
    if freq_loc == 'never':
        return '#'
    elif freq_loc == 'low':
        return '%d' % frequency_streams[0]
    elif freq_loc == 'medium':
        return '%d' % frequency_streams[1]
    elif freq_loc == 'high':
        return '%d' % frequency_streams[2]
    else:
        logger = logging.getLogger("__name__")
        logger.error("Unrecognized output frequency: '%s'" % freq_loc)

#######################################

def diagnostics_to_tavg(MARBL_diagnostics_in, tavg_contents_out, lMARBL_tavg_all, frequency_streams, append=False):
    import os, sys, logging
    logger = logging.getLogger("__name__")
    labort = False
    # 1. Check arguments:
    #    MARBL_diagnostics_in can not be None and must be path of an existing file
    if MARBL_diagnostics_in == None:
        logger.error("Must specific MARBL_diagnostics_in")
        labort = True
    elif not os.path.isfile(MARBL_diagnostics_in):
        logger.error("File not found %s" % MARBL_diagnostics_in)
        labort = True
    if labort:
        sys.exit(1)

    if tavg_contents_out != None:
        try:
            if append:
                outstream = open(tavg_contents_out, 'a')
            else:
                outstream = open(tavg_contents_out, 'w')
        except:
            logger.error("Can not open %s to write" % tavg_contents_out)
            sys.exit(1)
    else:
        outstream = sys.stdout

    # File header
    outstream.write('#  The following diagnostics were provided by MARBL\n')
    outstream.write('#  via %s\n' % MARBL_diagnostics_in)

    # Read MARBL_diagnostics_in line by line, convert each line to tavg content
    with open(MARBL_diagnostics_in, 'r') as file_in:
        all_lines = file_in.readlines()
    for line in all_lines:
        varname, frequency, operator = _parse_line(line.strip())
        if varname != None:
            if lMARBL_tavg_all:
                outstream.write('1  %s\n' % varname)
            else:
                outstream.write('%s  %s\n' % (_get_freq(frequency[0], frequency_streams), varname))
                if (len(frequency) > 1):
                    outstream.write('%s  %s_2\n' % (_get_freq(frequency[1], frequency_streams), varname))
                if (len(frequency) > 2):
                    logger.error("Variable %s appears in more than 2 streams" % varname)
                    sys.exit(1)

    # File footer
    outstream.write('#  end of MARBL-generated diagnostics\n')

    # Close stream (if writing to a file)
    if tavg_contents_out != None:
        outstream.close()

#######################################

if __name__ == "__main__":
    # Parse command line arguments
    args = _parse_args()

    import logging
    logging.basicConfig(format='%(levelname)s (%(funcName)s): %(message)s', level=logging.DEBUG)

    # call diagnostics_to_tavg()
    diagnostics_to_tavg(args.MARBL_diagnostics_in, args.tavg_contents_out, args.lMARBL_tavg_all,
                        [args.low_frequency_stream, args.medium_frequency_stream, args.high_frequency_stream],
                        args.append)