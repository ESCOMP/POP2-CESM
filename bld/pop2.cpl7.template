#! /bin/csh -f

if !(-d $CASEBUILD)  mkdir $CASEBUILD
if !(-d $CASEBUILD/pop2conf) mkdir    $CASEBUILD/pop2conf || exit 1
if !(-d $OBJROOT/ocn/obj   ) mkdir -p $OBJROOT/ocn/obj    || exit 2
if !(-d $OBJROOT/ocn/source) mkdir -p $OBJROOT/ocn/source || exit 3 
if !(-d $EXEROOT/ocn/input)  mkdir -p $EXEROOT/ocn/input  || exit 4

#==============================================================================
# Purpose: Create two ccsm build scripts:
#  (a) pop2.buildnml.csh -- build the pop2_in file
#  (b) pop2.buildexe.csh -- build a model executable
#==============================================================================

###==============================================================###
###  I.  Construct pop2.buildnml.csh                            ###
###==============================================================###

cat >! $CASEBUILD/pop2conf/config_cache.xml <<EOF1
<?xml version="1.0"?>
<config_definition>
<entry id="ocn_grid" value="$OCN_GRID">
</config_definition>
EOF1

cat >! $CASEBUILD/pop2.buildnml.csh << EOF1
#! /bin/csh -f

#======================================================================
# Purpose: create the pop2 namelist input file, pop2_in
#======================================================================

cd \$CASEBUILD/pop2conf || exit -1

set default_ocn_in_filename = "pop2_in"
setenv ocn_inst_counter 1
while (\$ocn_inst_counter <= \$NINST_OCN)

    set ocn_in_filename = \$default_ocn_in_filename

    if (\$NINST_OCN > 1) then
        set ocn_inst_string = \$ocn_inst_counter
        if (\$ocn_inst_counter <= 999) setenv ocn_inst_string = "0\$ocn_inst_string"
        if (\$ocn_inst_counter <=  99) setenv ocn_inst_string = "0\$ocn_inst_string"
        if (\$ocn_inst_counter <=   9) setenv ocn_inst_string = "0\$ocn_inst_string"
        set ocn_in_filename = \${default_ocn_in_filename}_\${ocn_inst_string}
        set log_filename = \${RUNDIR}/ocn_\${inst_string}.log.\$LID
    else
        set ocn_inst_string = ""
        set log_filename = \${RUNDIR}/ocn.log.\$LID
    endif

    # following env variable is not in any xml files - but is needed by pop's build-namelist
    setenv RESTART_INPUT_TS_FMT 'bin'
    if (-e \$RUNDIR/rpointer.ocn\${ocn_inst_string}.restart && \$CONTINUE_RUN == 'TRUE') then
      grep 'RESTART_FMT=' \$RUNDIR/rpointer.ocn\${ocn_inst_string}.restart >&! /dev/null
      if (\$status == 0) then
        setenv RESTART_INPUT_TS_FMT \`grep RESTART_FMT\= \$RUNDIR/rpointer.ocn\${ocn_inst_string}.restart | cut -c13-15\`
      endif
    endif

    # --- invoke build-namelist with above settings ---
    \$CASEROOT/Tools/Templates/build-namelist-pop2 \
     -infile \$CASEROOT/user_nl_pop2 \
     -namelist "&popexp  log_filename='\$log_filename/' " || exit -1

    cp -fp \$CASEBUILD/pop2conf/${OCN_GRID}_tavg_contents \$EXEROOT/ocn/input/${OCN_GRID}_tavg_contents

    # pop rpointer name for multi-instance case
    if (! -e \$RUNDIR/rpointer.ocn\${ocn_inst_string}.ovf && -e \$RUNDIR/rpointer.ocn.ovf) then
       cp \$RUNDIR/rpointer.ocn.ovf \$RUNDIR/rpointer.ocn\${ocn_inst_string}.ovf
    endif
    if (! -e \$RUNDIR/rpointer.ocn\${ocn_inst_string}.restart && -e \$RUNDIR/rpointer.ocn.restart) then
       cp \$RUNDIR/rpointer.ocn.restart \$RUNDIR/rpointer.ocn\${ocn_inst_string}.restart
    endif
    if (! -e \$RUNDIR/rpointer.ocn\${ocn_inst_string}.tavg && -e \$RUNDIR/rpointer.ocn.tavg) then
       cp \$RUNDIR/rpointer.ocn.tavg \$RUNDIR/rpointer.ocn\${ocn_inst_string}.tavg
    endif
    if (! -e \$RUNDIR/rpointer.ocn\${ocn_inst_string} && -e \$RUNDIR/rpointer.ocn) then
       cp \$RUNDIR/rpointer.ocn \$RUNDIR/rpointer.ocn\${ocn_inst_string}
    endif

    if (-f \$RUNDIR/pop2_in\${ocn_inst_string}) rm \$RUNDIR/pop2_in\${ocn_inst_string}

    cp \$CASEBUILD/pop2conf/pop2_in \${RUNDIR}/pop2_in\${ocn_inst_string}

   @ ocn_inst_counter = \$ocn_inst_counter + 1
end

cd \$RUNDIR
wait
exit 0

EOF1

###==============================================================###
###  II. Construct pop2.buildexe.csh                             ###
###==============================================================###

cat >! $CASEBUILD/pop2.buildexe.csh << EOF1
#! /bin/csh -f

echo -----------------------------------------------------------------
echo Create the internal directory structure
echo -----------------------------------------------------------------

set my_path = \$CASEROOT/SourceMods/src.pop2
set srcdir  = \$CODEROOT/ocn/pop2

echo -----------------------------------------------------------------
echo  Copy the necessary files into \$OBJROOT/ocn/source
echo -----------------------------------------------------------------

cd \$OBJROOT/ocn/source

cp -fp \$srcdir/source/*.F90                .
cp -fp \$srcdir/mpi/*.F90                   .
cp -fp \$srcdir/drivers/cpl_share/*.F90     .
if (\$COMP_INTERFACE == 'MCT') then
  cp -fp \$srcdir/drivers/cpl_mct/*.F90     .
else if (\$COMP_INTERFACE == 'ESMF') then
  cp -fp \$srcdir/drivers/cpl_esmf/*.F90    .
else
  echo "ERROR: must specifiy valid \$COMP_INTERFACE value"
  exit -1
endif
if (-d \$my_path ) cp -fp \$my_path/*.F90   .

if (-f \${my_path}/${OCN_GRID}_domain_size.F90) then
   cp -fp \${my_path}/${OCN_GRID}_domain_size.F90 \$OBJROOT/ocn/source/domain_size.F90
else if (-f  \$srcdir/input_templates/${OCN_GRID}_domain_size.F90 ) then
   cp -fp \$srcdir/input_templates/${OCN_GRID}_domain_size.F90 \$OBJROOT/ocn/source/domain_size.F90
else
   echo "missing ${OCN_GRID}_domain_size.F90 file"
   exit -1    
endif

# neded during LANL merge transition 
if (-f \${my_path}/${OCN_GRID}_POP_DomainSizeMod.F90) then
   cp -fp  \${my_path}/${OCN_GRID}_POP_DomainSizeMod.F90 \$OBJROOT/ocn/source/POP_DomainSizeMod.F90
else if (-f \$srcdir/input_templates/${OCN_GRID}_POP_DomainSizeMod.F90) then 
   cp -fp \$srcdir/input_templates/${OCN_GRID}_POP_DomainSizeMod.F90 \$OBJROOT/ocn/source/POP_DomainSizeMod.F90
else
   echo "missing ${OCN_GRID}_POP_DomainSizeMod.F90 file"
   exit -2    
endif

echo -----------------------------------------------------------------
echo  Compile pop2 library
echo -----------------------------------------------------------------

cd \${OBJROOT}/ocn/obj 

\cat >! Filepath <<EOF
\$OBJROOT/ocn/source
EOF

#  recompile if 2d decomp or NT is changed
if (-f \$CASEBUILD/pop2conf/POP2_cppdefs) then
    set recompile = FALSE
    diff \$CASEBUILD/pop2conf/POP2_cppdefs.new \$CASEBUILD/pop2conf/POP2_cppdefs || set recompile = TRUE
    echo "recompile is \$recompile"
    if (\$recompile == 'TRUE') then
	touch \`grep -l BLCKX   \$OBJROOT/ocn/source/*\`  # force recompile
	touch \`grep -l BLCKY   \$OBJROOT/ocn/source/*\`  # force recompile
	touch \`grep -l MXBLCKS \$OBJROOT/ocn/source/*\`  # force recompile
	touch \`grep -l NT      \$OBJROOT/ocn/source/*\`  # force recompile
    endif  
endif
cp -fp \$CASEBUILD/pop2conf/POP2_cppdefs.new \$CASEBUILD/pop2conf/POP2_cppdefs
set pop2defs = "\`cat \$CASEBUILD/pop2conf/POP2_cppdefs\`"

gmake complib -j \$GMAKE_J MODEL=pop2 COMPLIB=\$LIBROOT/libocn.a USER_CPPDEFS="\$pop2defs" -f \$CASETOOLS/Makefile || exit 2

echo " "
echo ----------------------------------------------------------------------------
echo  Note that f90 files may not exist on all machines
echo ----------------------------------------------------------------------------

set f90_dir = \$OBJROOT/ocn/source/f90
if !(-d  \$f90_dir ) mkdir -p \$f90_dir
mv -f *.f90 \$f90_dir

if !(-f \$LIBROOT/libocn.a) then
  echo "ERROR: pop2 library not available"
  exit -1
endif

echo " "
echo -------------------------------------------------------------------------
echo  Successful completion of the pop2 executable building process
echo -------------------------------------------------------------------------
EOF1


