#! /bin/csh -f

if !(-d $CASEBUILD)  mkdir $CASEBUILD

###==============================================================###
###  Construct pop2.buildnml.csh                                 ###
###==============================================================###

# create user_nl_pop files
if ($NINST_OCN > 1) then
   set inst_counter = 1
   set inst_string = ""
   while ($inst_counter <= $NINST_OCN)
      set inst_string = $inst_counter
      if ($inst_counter <= 999) set inst_string = "0$inst_string"
      if ($inst_counter <=  99) set inst_string = "0$inst_string"
      if ($inst_counter <=   9) set inst_string = "0$inst_string"
      set inst_string = _${inst_string}
      if ( ! -f "$CASEROOT/user_nl_pop2${inst_string}" ) then
         cp $CODEROOT/ocn/pop2/bld/user_nl_pop2 $CASEROOT/user_nl_pop2${inst_string}
      endif
      @ inst_counter = $inst_counter + 1
   end 
else
   if ( ! -f "$CASEROOT/user_nl_pop2" ) then
      cp $CODEROOT/ocn/pop2/bld/user_nl_pop2 $CASEROOT/user_nl_pop2
   endif
endif

# create pop2.buildnml.csh
cat >! $CASEBUILD/pop2.buildnml.csh << EOF1
#! /bin/csh -f

if !(-d \$OBJROOT/ocn/obj   ) mkdir -p \$OBJROOT/ocn/obj    || exit 2
if !(-d \$OBJROOT/ocn/source) mkdir -p \$OBJROOT/ocn/source || exit 3 
if !(-d \$OBJROOT/ocn/input ) mkdir -p \$OBJROOT/ocn/input  || exit 4

if !(-d \$CASEBUILD/pop2conf) mkdir \$CASEBUILD/pop2conf || exit 1
cd \$CASEBUILD/pop2conf || exit -1

set default_ocn_in_filename = "pop2_in"
set inst_counter = 1
while (\$inst_counter <= \$NINST_OCN)

if (\$NINST_OCN > 1) then
    set inst_string = \$inst_counter
    if (\$inst_counter <= 999) set inst_string = "0\$inst_string"
    if (\$inst_counter <=  99) set inst_string = "0\$inst_string"
    if (\$inst_counter <=   9) set inst_string = "0\$inst_string"
    set inst_string = _\${inst_string}
    setenv output_r  ./\$CASE.pop\${inst_string}.r
    setenv output_h  ./\$CASE.pop\${inst_string}.h
    setenv output_d  ./\$CASE.pop\${inst_string}.d
else
    set inst_string = ""
    setenv output_r  ./\$CASE.pop.r
    setenv output_h  ./\$CASE.pop.h
    setenv output_d  ./\$CASE.pop.d
endif

set ocn_in_filename = \${default_ocn_in_filename}\${inst_string}
set log_filename = \${RUNDIR}/ocn\${inst_string}.log.\$LID

if (\$NINST_OCN > 1) then
   # pop rpointer name for multi-instance case
   if (! -e \$RUNDIR/rpointer.ocn\${inst_string}.ovf && -e \$RUNDIR/rpointer.ocn.ovf) then
      cp \$RUNDIR/rpointer.ocn.ovf \$RUNDIR/rpointer.ocn\${inst_string}.ovf
   endif
   if (! -e \$RUNDIR/rpointer.ocn\${inst_string}.restart && -e \$RUNDIR/rpointer.ocn.restart) then
      cp \$RUNDIR/rpointer.ocn.restart \$RUNDIR/rpointer.ocn\${inst_string}.restart
   endif
   if (! -e \$RUNDIR/rpointer.ocn\${inst_string}.tavg && -e \$RUNDIR/rpointer.ocn.tavg) then
      cp \$RUNDIR/rpointer.ocn.tavg \$RUNDIR/rpointer.ocn\${inst_string}.tavg
   endif
   if (! -e \$RUNDIR/rpointer.ocn\${inst_string} && -e \$RUNDIR/rpointer.ocn) then
      cp \$RUNDIR/rpointer.ocn \$RUNDIR/rpointer.ocn\${inst_string}
   endif
endif

# following env variable is not in any xml files - but is needed by pop's build-namelist
if (\$RUN_TYPE == startup) then
  setenv RESTART_INPUT_TS_FMT 'bin'
  if (-e \$RUNDIR/rpointer.ocn\${inst_string}.restart && \$CONTINUE_RUN == 'TRUE') then
    grep 'RESTART_FMT=' \$RUNDIR/rpointer.ocn\${inst_string}.restart >&! /dev/null
    if (\$status == 0) then
      setenv RESTART_INPUT_TS_FMT \`grep RESTART_FMT\= \$RUNDIR/rpointer.ocn\${inst_string}.restart | cut -c13-15\`
    endif
  endif 
endif
if (\$RUN_TYPE == branch || \$RUN_TYPE == hybrid) then
  setenv RESTART_INPUT_TS_FMT 'bin'
  grep 'RESTART_FMT=' \$RUNDIR/rpointer.ocn\${inst_string}.restart >&! /dev/null
  if (\$status == 0) then
    setenv RESTART_INPUT_TS_FMT \`grep RESTART_FMT\= \$RUNDIR/rpointer.ocn\${inst_string}.restart | cut -c13-15\`
  endif
endif

cat >! \$CASEBUILD/pop2conf/cesm_namelist << EOF2
&pop2_inparm
 log_filename='\$log_filename'
 moby_log_filename='\${RUNDIR}/moby\${inst_string}.log.\$LID'
EOF2
\$UTILROOT/Tools/user_nl_add -user_nl_file \$CASEROOT/user_nl_pop2\${inst_string} >> \$CASEBUILD/pop2conf/cesm_namelist 
cat >> \$CASEBUILD/pop2conf/cesm_namelist << EOF2
/
EOF2

\$CODEROOT/ocn/pop2/bld/build-namelist -infile \$CASEBUILD/pop2conf/cesm_namelist || exit -1

if (-d \${RUNDIR}) then
  cp \$CASEBUILD/pop2conf/pop2_in \${RUNDIR}/\$ocn_in_filename || exit -2
endif

# pop rpointer name for multi-instance case
foreach suffix ( ovf restart tavg ) 
   if (! -e \$RUNDIR/rpointer.ocn\${inst_string}.suffix && -e \$RUNDIR/rpointer.ocn.suffix ) then
      cp \$RUNDIR/rpointer.ocn.\$suffix \$RUNDIR/rpointer.ocn\${inst_string}.\$suffix
   endif
end 
if (! -e \$RUNDIR/rpointer.ocn\${inst_string} && -e \$RUNDIR/rpointer.ocn) then
   cp \$RUNDIR/rpointer.ocn \$RUNDIR/rpointer.ocn\${inst_string}
endif

if (-f \$RUNDIR/pop2_in\${inst_string}) rm \$RUNDIR/pop2_in\${inst_string}
cp -fp \$CASEBUILD/pop2conf/pop2_in  \${RUNDIR}/pop2_in\${inst_string}
cp -fp \$CASEBUILD/pop2conf/pop2_${OCN_GRID}_tavg_contents  \$EXEROOT/ocn/input/pop2_${OCN_GRID}_tavg_contents


@ inst_counter = \$inst_counter + 1

end

wait
exit 0

EOF1


###==============================================================###
###  Construct pop2.buildexe.csh                                 ###
###==============================================================###

cat >! $CASEBUILD/pop2.buildexe.csh << EOF1
#! /bin/csh -f

if !(-d \$OBJROOT/ocn/obj   ) mkdir -p \$OBJROOT/ocn/obj    || exit 2
if !(-d \$OBJROOT/ocn/source) mkdir -p \$OBJROOT/ocn/source || exit 3 
if !(-d \$OBJROOT/ocn/input ) mkdir -p \$OBJROOT/ocn/input  || exit 4

set my_path = \$CASEROOT/SourceMods/src.pop2

echo -----------------------------------------------------------------
echo  Copy the necessary files into \$OBJROOT/ocn/source
echo -----------------------------------------------------------------

cd \$OBJROOT/ocn/source

foreach comp (\`echo \$OCN_TRACER_MODULES\`)
  if (\$comp == moby) then
    cp -fp \$CODEROOT/ocn/pop2/aux/moby/pop2/*.F90 .
  endif
end
cp -fp \$CODEROOT/ocn/pop2/source/*.F90  .
cp -fp \$CODEROOT/ocn/pop2/mpi/*.F90  .
cp -fp \$CODEROOT/ocn/pop2/drivers/cpl_share/*.F90  .
if (\$COMP_INTERFACE == 'MCT') then
  cp -fp \$CODEROOT/ocn/pop2/drivers/cpl_mct/*.F90 .
else if (\$COMP_INTERFACE == 'ESMF') then
  cp -fp \$CODEROOT/ocn/pop2/drivers/cpl_esmf/*.F90 .
else
  echo "ERROR: must specifiy valid \$COMP_INTERFACE value"
  exit -1
endif
if (-d \$my_path ) cp -fp \$my_path/*.F90 .

if (-f \${my_path}/${OCN_GRID}_domain_size.F90) then
   cp -fp \${my_path}/${OCN_GRID}_domain_size.F90 \$OBJROOT/ocn/source/domain_size.F90
else if (-f  \$CODEROOT/ocn/pop2/input_templates/${OCN_GRID}_domain_size.F90 ) then
   cp -fp \$CODEROOT/ocn/pop2/input_templates/${OCN_GRID}_domain_size.F90 \$OBJROOT/ocn/source/domain_size.F90
else
   echo "missing ${OCN_GRID}_domain_size.F90 file"
   exit -1    
endif

# neded during LANL merge transition 
if (-f \${my_path}/${OCN_GRID}_POP_DomainSizeMod.F90) then
   cp -fp  \${my_path}/${OCN_GRID}_POP_DomainSizeMod.F90 \$OBJROOT/ocn/source/POP_DomainSizeMod.F90
else if (-f \$CODEROOT/ocn/pop2/input_templates/${OCN_GRID}_POP_DomainSizeMod.F90) then 
   cp -fp \$CODEROOT/ocn/pop2/input_templates/${OCN_GRID}_POP_DomainSizeMod.F90 \$OBJROOT/ocn/source/POP_DomainSizeMod.F90
else
   echo "missing ${OCN_GRID}_POP_DomainSizeMod.F90 file"
   exit -2    
endif

echo -------------------------------------------------------------------------
echo  Build all auxilliary ocean-component models before building pop2 library
echo  For now - building moby component if appropriate
echo -------------------------------------------------------------------------

foreach comp (\`echo \$OCN_TRACER_MODULES\`)
if (\$comp == moby) then

   if !(-d \$OBJROOT/ocn/moby/source ) mkdir -p \$OBJROOT/ocn/moby/source
   if !(-d \$OBJROOT/ocn/moby/obj    ) mkdir -p \$OBJROOT/ocn/moby/obj

   echo -----------------------------------------------------------------
   echo  Copy selected MITgcm ptracers, chem and base-model files,
   echo  all darwin/quota/etc base-model, CESM interface files and 
   echo  any nonstandard files 
   echo -----------------------------------------------------------------

   cd \$OBJROOT/ocn/moby/source
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/*.h .
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/ptracers_readparms.F . 
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/ptracers_diagnostics_init.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/ptracers_init_fixed.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/ptracers_set_iolabel.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/gchem_diagnostics_init.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/gchem_init_fixed.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/gchem_init_vari.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/gchem_readparms.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/different_multiple.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/load_grid_spacing barrier.F . 
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/eeboot.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/eeboot_minimal.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/fool_the_compiler.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/ini_grid.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/ini_masks_etc.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/ini_vertical_grid.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/ini_parms.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/open_copy_data_file.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/packages_boot.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/port_rand print.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/set_defaults.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/timeave_reset.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/utils.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/write_utils.F .  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/MITgcm/lef_zero.F .  
  
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/\$OCN_TRACER_MODULES_OPT/source/*.[FHh] .
   cp -fp \$CODEROOT/ocn/pop2/aux/moby/\$OCN_TRACER_MODULES_OPT/interf/*.[FHh]  .

   set my_path = \$CASEROOT/SourceMods/src.pop2/src.moby
   if (-d \$my_path ) cp -fp \$my_path/*.[FHh]  .

   echo -----------------------------------------------------------------
   echo Compile moby library
   echo NOTE: ALLOW_DARWIN and ALLOW_GCHEM are set in PACKAGES_CONFIG.h.
   echo       GCHEM  options are set in  GCHEM_OPTIONS.h
   echo       DARWIN options are set in  DARWIN_OPTIONS.h
   echo -----------------------------------------------------------------

   cd \$OBJROOT/ocn/moby/obj
   cat >! Filepath <<EOF
\$OBJROOT/ocn/moby/source
EOF

   # Enforce the no-threading constraint
   if ( \$POP_MXBLCKS != 1 ) then
      echo "fatal moby error: POP_MXBLCKS must equal one"
      echo "moby info message:  POP_MXBLCKS = \$POP_MXBLCKS"
      exit -32
   endif
   if      ( \${OCN_GRID} =~ gx3* ) then
      setenv POP_KM 60
   else if ( \${OCN_GRID} =~ gx1* ) then
      setenv POP_KM 60
   else 
     echo OCN_GRID = \$OCN_GRID
     echo "moby error: valid only for gx1 and gx3 grids"
     exit -33
   endif

   set mobydefs = "-DCESMMOBY -DPOP_NPROCX=\$POP_NX_BLOCKS -DPOP_NPROCY=\$POP_NY_BLOCKS -DPOP_MXBLCKS=\$POP_MXBLCKS -DPOP_BLCKX=\$POP_BLCKX -DPOP_BLCKY=\$POP_BLCKY -DPOP_KM=\$POP_KM"

   gmake complib -j \$GMAKE_J MODEL=moby COMPLIB=\$LIBROOT/libmoby.a USER_CPPDEFS="\$mobydefs" -f \$CASETOOLS/Makefile || exit 2

   set f_dir = \$OBJROOT/ocn/moby/source/f_files
   if !(-d  \$f_dir ) mkdir -p \$f_dir
   mv -f *.f \$f_dir

   if !(-f \$LIBROOT/libmoby.a) then
     echo "ERROR: moby library not available"
     exit -1
   endif

endif
end

echo -----------------------------------------------------------------
echo  Build pop2 library
echo -----------------------------------------------------------------

cd \${OBJROOT}/ocn/obj 

\cat >! Filepath <<EOF
\$OBJROOT/ocn/source
EOF

setenv USE_OCN_MOBY FALSE
@ NT = 2
foreach module ( \`echo \$OCN_TRACER_MODULES\` )  
   if (\$module =~ "iage"   ) @ NT = \$NT +  1
   if (\$module =~ "cfc"    ) @ NT = \$NT +  2   
   if (\$module =~ "ecosys" ) @ NT = \$NT + 24   
   if (\$module == moby     ) then
      setenv USE_OCN_MOBY TRUE
      if (-e \$my_path/\${OCN_GRID}_data.ptracers) then
        set dir = \$my_path
      else if (-e \$CODEROOT/ocn/pop2/aux/moby/darwin/input/\${OCN_GRID}_data.ptracers) then
        set dir = \$CODEROOT/ocn/pop2/aux/moby/darwin/input
      else
        exit 31
      endif
      set nt_moby = \`grep PTRACERS_numInUse \$dir/\${OCN_GRID}_data.ptracers | cut -f 2 -d = | cut -f 1 -d","\`
      if (\$status != 0) exit 32
      @ NT = \$NT + \$nt_moby
    endif
end

set cppdefs = "-DCCSMCOUPLED -DBLCKX=\$POP_BLCKX -DBLCKY=\$POP_BLCKY -DMXBLCKS=\$POP_MXBLCKS -DNT=\$NT"
if (\$OCN_ICE_FORCING == 'inactive' ) set cppdefs = "\$cppdefs -DZERO_SEA_ICE_REF_SAL"
if (\$OCN_GRID =~ "tx0.1*"          ) set cppdefs = "\$cppdefs -D_HIRES";
if (\$USE_OCN_MOBY == TRUE          ) set cppdefs = "\$cppdefs -DCESMMOBY"
if (\$OCN_ICE_FORCING == 'inactive' ) set cppdefs = "\$cppdefs -DZERO_SEA_ICE_REF_SAL"

cat >! \$OBJROOT/ocn/obj/POP2_cppdefs.new <<EOF
\$cppdefs
EOF

#  recompile if 2d decomp or NT is changed
set recompile = FALSE
if (-e \$OBJROOT/ocn/obj/POP2_cppdefs) then
    diff \$OBJROOT/ocn/obj/POP2_cppdefs.new \$OBJROOT/ocn/obj/POP2_cppdefs || set recompile = TRUE
    echo "recompile is \$recompile"
    if (\$recompile == 'TRUE') then
	touch \`grep -wl BLCKX   \$OBJROOT/ocn/source/*\`  # force recompile
	touch \`grep -wl BLCKY   \$OBJROOT/ocn/source/*\`  # force recompile
	touch \`grep -wl MXBLCKS \$OBJROOT/ocn/source/*\`  # force recompile
	touch \`grep -wl NT      \$OBJROOT/ocn/source/*\`  # force recompile
    endif  
endif
cp -f \$OBJROOT/ocn/obj/POP2_cppdefs.new \$OBJROOT/ocn/obj/POP2_cppdefs
set pop2defs = "\`cat \$OBJROOT/ocn/obj/POP2_cppdefs\`"

gmake complib -j \$GMAKE_J MODEL=pop2 COMPLIB=\$LIBROOT/libocn.a USER_CPPDEFS="\$pop2defs" -f \$CASETOOLS/Makefile || exit 2

echo " "
echo ----------------------------------------------------------------------------
echo  Note that f90 files may not exist on all machines
echo ----------------------------------------------------------------------------

set f90_dir = \$OBJROOT/ocn/source/f90
if !(-d  \$f90_dir ) mkdir -p \$f90_dir
mv -f *.f90 \$f90_dir

if !(-f \$LIBROOT/libocn.a) then
  echo "ERROR: pop2 library not available"
  exit -1
endif

echo " "
echo -------------------------------------------------------------------------
echo  Successful completion of the pop2 executable building process
echo -------------------------------------------------------------------------
EOF1


