#! /usr/bin/env perl
use strict;
use Cwd;

if ($#ARGV == -1) {
    die " ERROR pop2.buildnml: must specify a caseroot input argument";
}
my ($CASEROOT) = @ARGV;
chdir "${CASEROOT}";

my @dirs = ("$CASEROOT/Tools");
unshift @INC, @dirs;
require SetupTools;
my $sysmod; 

my $CASEROOT			= `./xmlquery CASEROOT			-value`;
my $CASEBUILD			= `./xmlquery CASEBUILD		        -value`;
my $CCSMROOT			= `./xmlquery CCSMROOT			-value`;
my $OBJROOT			= `./xmlquery OBJROOT			-value`;
my $SCRIPTSROOT			= `./xmlquery SCRIPTSROOT		-value`;
my $CASETOOLS			= `./xmlquery CASETOOLS			-value`;
my $CONTINUE_RUN		= `./xmlquery CONTINUE_RUN		-value`;
my $DIN_LOC_ROOT		= `./xmlquery DIN_LOC_ROOT		-value`;
my $EXEROOT			= `./xmlquery EXEROOT			-value`;
my $GET_REFCASE			= `./xmlquery GET_REFCASE		-value`;
my $NTASKS_OCN			= `./xmlquery NTASKS_OCN		-value`;
my $NTHRDS_OCN			= `./xmlquery NTHRDS_OCN		-value`;
my $NINST_OCN			= `./xmlquery NINST_OCN		        -value`;
my $OCN_GRID			= `./xmlquery OCN_GRID			-value`;
my $OCN_TRACER_MODULES		= `./xmlquery OCN_TRACER_MODULES	-value`;
my $OCN_TRACER_MODULES_OPT	= `./xmlquery OCN_TRACER_MODULES_OPT	-value`;
my $OCN_TAVG_TRACER_BUDGET	= `./xmlquery OCN_TAVG_TRACER_BUDGET	-value`;
my $OCN_ICE_FORCING		= `./xmlquery OCN_ICE_FORCING		-value`;
my $POP_AUTO_DECOMP		= `./xmlquery POP_AUTO_DECOMP		-value`;
my $POP_BLCKX			= `./xmlquery POP_BLCKX			-value`;
my $POP_BLCKY			= `./xmlquery POP_BLCKY			-value`;
my $POP_MXBLCKS			= `./xmlquery POP_MXBLCKS		-value`;
my $POP_TAVG_R8			= `./xmlquery POP_TAVG_R8		-value`;
my $RUN_TYPE			= `./xmlquery RUN_TYPE			-value`;
my $RUN_REFCASE			= `./xmlquery RUN_REFCASE		-value`;
my $RUN_REFDATE			= `./xmlquery RUN_REFDATE		-value`;
my $RUNDIR			= `./xmlquery RUNDIR			-value`;

if (! -d "$EXEROOT/ocn/obj" ) {
    $sysmod = "mkdir -p $EXEROOT/ocn/obj";
    system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
}
if (! -d "$EXEROOT/ocn/source") {
    $sysmod = "mkdir -p $EXEROOT/ocn/source";
    system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
}
if (! -d "$CASEBUILD/pop2conf" ) {
    $sysmod = "mkdir $CASEBUILD/pop2conf";
    system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
}

chdir "$CASEBUILD/pop2conf";

#--------------------------------------------------------------------
# determine pop2 build time settings 
# this will potentially change values in env_build.xml 
# and  will determine if need to rebuild before continuing
#--------------------------------------------------------------------

if ($POP_AUTO_DECOMP eq 'true') {
    my $ntasks = $NTASKS_OCN / $NINST_OCN;
    chdir "$CASEBUILD";
    my $config_args = `./generate_pop_decomp.pl -ccsmroot $CCSMROOT -res $OCN_GRID -nproc $ntasks -thrds $NTHRDS_OCN -output all`;
    my @config = split(/\s/, $config_args);
    chdir "$CASEROOT";
    if ($config[0] >= 0) {
	$sysmod = "./xmlchange POP_BLCKX=$config[2]";
	system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
	$sysmod = "./xmlchange POP_BLCKY=$config[3]";
	system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
	$sysmod = "./xmlchange POP_MXBLCKS=$config[4]";
	system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
	$sysmod = "./xmlchange POP_DECOMPTYPE=$config[5]";
	system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
	$sysmod = "./xmlchange POP_NX_BLOCKS=$config[6]";
	system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
	$sysmod = "./xmlchange POP_NY_BLOCKS=$config[7]";
	system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
    } else {
	die "ERROR pop2.buildnml: pop decomp not set for $OCN_GRID on $ntasks x  $NTHRDS_OCN procs \n";
    }
}

# create POP_CPPDEFS (cpp definitions) in env_build.xml
chdir "$CASEBUILD";
generate_pop_cppdefs($CASEROOT);

#--------------------------------------------------------------------
# Obtain correct pop rpointer files
#--------------------------------------------------------------------

if (($GET_REFCASE eq 'TRUE') && ($RUN_TYPE ne 'startup') && ($CONTINUE_RUN eq 'FALSE')) {
    # During prestage step, rpointer files are copied from refdir
    # Get rid of old rpointer files if they exist and copy them 
    # independently of the prestage.  This is needed for rerunability
    # of cases from REFCASE data for first run
    $sysmod = "  rm -f $RUNDIR/rpointer.ocn* >& /dev/null";
    system($sysmod);

    my $refdir = "ccsm4_init/$RUN_REFCASE/$RUN_REFDATE";
    $sysmod = "cp -f $DIN_LOC_ROOT/$refdir/rpointer.ocn* $RUNDIR/.";
    system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";

    $sysmod = "chmod u+w $RUNDIR/rpointer.ocn* >& /dev/null";
    system($sysmod);
}

#--------------------------------------------------------------------
# Invoke pop2 build-namelist - output will go in $CASEBUILD/pop2conf
#--------------------------------------------------------------------

chdir "$CASEBUILD/pop2conf";

my $inst_string;
my $inst_counter = 1;
while ($inst_counter <= $NINST_OCN) {

    # -----------------------------------------------------
    # determine instance string 
    # -----------------------------------------------------

    $inst_string = "";       
    if ($NINST_OCN > 1) {
	$inst_string = `printf _%04d $inst_counter`;
    
	# If multi-instance case does not have restart file, use single-case restart for each instance
	foreach my $suffix ( "ovf", "restart", "tavg" ) {
	    print "Looking to see if rpointer.ocn.${suffix} exists and rpointer.ocn${inst_string}.${suffix} does not... \n";
	    if ( (! -e "$RUNDIR/rpointer.ocn${inst_string}.${suffix}") && (-e "$RUNDIR/rpointer.ocn.${suffix}") ) {
		$sysmod = "cp -v $RUNDIR/rpointer.ocn.${suffix} $RUNDIR/rpointer.ocn${inst_string}.${suffix}";
		system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
	    }
	}
    }

    # -----------------------------------------------------
    # create pop2conf/cesm_namelist
    # -----------------------------------------------------

    SetupTools::create_namelist_infile("$CASEROOT", 
				       "$CASEROOT/user_nl_pop2${inst_string}", 
				       "$CASEBUILD/pop2conf/cesm_namelist"); 

    # -----------------------------------------------------
    # env variable declaring type of pop restart file (nc vs bin) 
    # -----------------------------------------------------

    # RESTART_INPUT_TS_FMT is needed by pop's build-namelist and is not in any xml files; 
    # it comes from rpointer.ocn.restart, which is in $RUNDIR for continued runs, 
    # but is in $refdir for hybrid / branch runs that are not continuations

    my $check_pointer_file = 'TRUE';
    if (($RUN_TYPE eq 'startup') && ($CONTINUE_RUN eq 'FALSE')) {$check_pointer_file = 'FALSE';}
  
    my $pointer_file = "$RUNDIR/rpointer.ocn${inst_string}.restart";
    if (($GET_REFCASE == 'TRUE') && ($RUN_TYPE != 'startup') && ($CONTINUE_RUN == 'FALSE')) {
	# During prestage step, rpointer files are copied from refdir
	my $refdir = "ccsm4_init/$RUN_REFCASE/$RUN_REFDATE";
	my $pointer_file = "$DIN_LOC_ROOT/$refdir/rpointer.ocn${inst_string}.restart";
	if (! -e "$pointer_file") { $pointer_file = "$RUNDIR/rpointer.ocn${inst_string}.restart";}
    }
  
    $ENV{'RESTART_INPUT_TS_FMT'} = 'bin'; 
    if ($check_pointer_file eq 'TRUE')  {
	$sysmod = "grep 'RESTART_FMT=' $pointer_file >& /dev/null";
	if (system($sysmod) == 0) {
	    print "Getting init_ts_file_fmt from $pointer_file \n";
	    $ENV{'RESTART_INPUT_TS_FMT'}  = `grep RESTART_FMT= $pointer_file | cut -c13-15`;
	}
    }

    # -----------------------------------------------------
    # call build-namelist- output will go in $CASEBUILD/pop2conf/ocn_in
    # -----------------------------------------------------
    
    # Check to see if "-preview" flag should be passed
    my $preview_flag = "";
    if ( $ENV{'PREVIEW_NML'} ) {$preview_flag = "-preview"};
    
    # Check to see if build-namelist exists in SourceMods
    
    my $bld_nml_dir = "$CCSMROOT/components/pop2/bld";
    my $cfg_flag = "";
    if (-e "$CASEROOT/SourceMods/src.pop2/build-namelist") {
	$bld_nml_dir = "$CASEROOT/SourceMods/src.pop2";
	$cfg_flag = "-cfg_dir $CCSMROOT/components/pop2/bld";
    }
  
    # Note that the following two environment variables are needed by the csh template scripts 
    # called by build-namelist
    $sysmod = "$bld_nml_dir/build-namelist $cfg_flag $preview_flag";
    $sysmod = "$sysmod -infile $CASEBUILD/pop2conf/cesm_namelist";
    $sysmod = "$sysmod -caseroot $CASEROOT"; 
    $sysmod = "$sysmod -casebuild $CASEBUILD";
    $sysmod = "$sysmod -scriptsroot $SCRIPTSROOT";
    $sysmod = "$sysmod -inst_string \"$inst_string\"";
    $sysmod = "$sysmod -ocn_grid \"$OCN_GRID\"";
    system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";

    # -----------------------------------------------------
    # Copy resolved namelist to $RUNDIR
    # -----------------------------------------------------

    if (-d ${RUNDIR}) {
	$sysmod = "cp -fp $CASEBUILD/pop2conf/pop2_in   ${RUNDIR}/pop2_in${inst_string}";
	system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";

	$sysmod = "cp -fp $CASEBUILD/pop2conf/${OCN_GRID}_tavg_contents   ${RUNDIR}/${OCN_GRID}_tavg_contents";
	system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";
    }

    # -----------------------------------------------------
    # increment instance counter
    # -----------------------------------------------------

    $inst_counter = $inst_counter + 1;

}

exit (0);

sub generate_pop_cppdefs{
    #-------------------------------------------------------------- 
    # determine number of tracers
    #-------------------------------------------------------------- 
    my $ECOSYS_NT       = 27;
    my $ZOOPLANKTON_CNT = 1;
    my $AUTOTROPH_CNT   = 3;
    my $GRAZER_PREY_CNT = 3;
    my $NT = 2;

    my @ocn_tracer_modules = split(/\s/, $OCN_TRACER_MODULES);
    foreach my $module ( @ocn_tracer_modules )  {

	if ($module =~ /^iage/		) {$NT = $NT +  1;}
	if ($module =~ /^cfc/		) {$NT = $NT +  2;}   
	if ($module =~ /^abio_dic_dic14/) {$NT = $NT +  2;}
	if ($module =~ /^ciso/		) {$NT = $NT + 14;}
	
	if ($module =~ /^ecosys/		) {
	    my @ocn_tracer_modules_opt = split(/\s/, $OCN_TRACER_MODULES_OPT);
	    foreach my $module_opt ( @ocn_tracer_modules_opt ) {
		if ( `echo $module_opt | cut -f 1 -d =` eq "ECOSYS_NT" ) {
		    $ECOSYS_NT = `echo $module_opt | cut -f 2 -d =`;
		}
		if ( `echo $module_opt | cut -f 1 -d =` eq "ZOOPLANKTON_CNT" ) {
		    $ZOOPLANKTON_CNT = `echo $module_opt | cut -f 2 -d =`;
		}
		if ( `echo $module_opt | cut -f 1 -d =` eq "AUTOTROPH_CNT" ) {
		    $AUTOTROPH_CNT = `echo $module_opt | cut -f 2 -d =`;
		}
		if ( `echo $module_opt | cut -f 1 -d =` eq "GRAZER_PREY_CNT" ) {
		    $GRAZER_PREY_CNT = `echo $module_opt | cut -f 2 -d =`;
		}
	    }
	    $NT = $NT + $ECOSYS_NT;     
	}
	
	if ($module eq "moby" ) {
	    my $dir;
	    if (-e "$CASEROOT/SourceMods/src.pop2/${OCN_GRID}_data.ptracers") {
		$dir = "$CASEROOT/SourceMods/src.pop2";
	    } elsif (-e "$CCSMROOT/components/pop2/aux/moby/darwin/input/${OCN_GRID}_data.ptracers") {
		$dir = "$CCSMROOT/components/pop2/aux/moby/darwin/input";
	    } else {
		die "ERROR pop2.buildexe: cannot find moby tracers";
	    }
	    my $NT_MOBY = `grep PTRACERS_numInUse $dir/${OCN_GRID}_data.ptracers | cut -f 2 -d = | cut -f 1 -d","`;
	    $NT = $NT + $NT_MOBY;
	}
    }
    #-------------------------------------------------------------- 
    # determine CPP definitions
    #-------------------------------------------------------------- 
    
    my $cppdefs = "-DCCSMCOUPLED -DBLCKX=$POP_BLCKX -DBLCKY=$POP_BLCKY -DMXBLCKS=$POP_MXBLCKS -DNT=$NT ";
    if ("$OCN_GRID" =~ /tx0.1*/		) {$cppdefs = "$cppdefs -D_HIRES";}
    if ("$OCN_ICE_FORCING" eq 'inactive'	) {$cppdefs = "$cppdefs -DZERO_SEA_ICE_REF_SAL";}
    if ("$POP_TAVG_R8" eq 'TRUE'		) {$cppdefs = "$cppdefs -DTAVG_R8";}
    $cppdefs = "$cppdefs -DECOSYS_NT=$ECOSYS_NT";
    $cppdefs = "$cppdefs -DZOOPLANKTON_CNT=$ZOOPLANKTON_CNT";
    $cppdefs = "$cppdefs -DAUTOTROPH_CNT=$AUTOTROPH_CNT";
    $cppdefs = "$cppdefs -DGRAZER_PREY_CNT=$GRAZER_PREY_CNT";
    
    # write out cppdefs to env_build.xml
    # this will determine if need to rebuild at runtime - force user to call $CASE.buildexe

    chdir "$CASEROOT";
    my $sysmod = "./xmlchange -id POP_CPPDEFS -file env_build.xml -val=\'$cppdefs\'";
    system($sysmod) == 0 or die "ERROR pop2.buildnml: $sysmod failed: $?\n";

    # write out cppdefs to POP2_cppdefs.new
    # this will force gmake to rebuild when $CASE.buildexe is called

    open(file,">$OBJROOT/ocn/obj/POP2_cppdefs.new") or die "Could not open file $OBJROOT/ocn/obj/POP2_cppdefs.new to write";
    print file "$cppdefs \n";
    close(file);
    
}
    




