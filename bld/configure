#!/usr/bin/env perl
#-----------------------------------------------------------------------------------------------
#
# configure
#
# This script sets up config_cache.xml (containing build-time parameters that
# affect the ocean namelist, such as what grid is being used and which ocean
# tracer modules are enabled) and also handles the pop decomposition.
#
# Needs to be passed $CASEROOT!

my $CASEROOT = shift;

# Environment variables
my $SRCROOT, $CIMEROOT, $CASEROOT, $OBJROOT, $OCN_GRID, @OCN_TRACER_MODULES;
my @OCN_TRACER_MODULES_OPT, $POP_AUTO_DECOMP, $POP_BLCKX, $POP_BLCKY;
my $POP_MXBLCKS, $POP_TAVG_R8, $NTHRDS_OCN, $NINST_OCN, $OCN_ICE_FORCING;

chdir "$CASEROOT";
$SRCROOT                 = `./xmlquery SRCROOT                -value`;
$CASEROOT                = `./xmlquery CASEROOT               -value`;
$CIMEROOT                = `./xmlquery CIMEROOT               -value`;
$OBJROOT                 = `./xmlquery OBJROOT                -value`;
$TESTCASE                = `./xmlquery TESTCASE               -value`;
$OCN_GRID                = `./xmlquery OCN_GRID               -value`;
@OCN_TRACER_MODULES      = split(" ",`./xmlquery OCN_TRACER_MODULES     -value`);
@OCN_TRACER_MODULES_OPT  = split(" ",`./xmlquery OCN_TRACER_MODULES_OPT -value`);
$POP_AUTO_DECOMP         = `./xmlquery POP_AUTO_DECOMP        -value`;
$POP_BLCKX               = `./xmlquery POP_BLCKX              -value`;
$POP_BLCKY               = `./xmlquery POP_BLCKY              -value`;
$POP_MXBLCKS             = `./xmlquery POP_MXBLCKS            -value`;
$POP_TAVG_R8             = `./xmlquery POP_TAVG_R8            -value`;
$NTASKS_OCN              = `./xmlquery NTASKS_OCN             -value`;
$NTHRDS_OCN              = `./xmlquery NTHRDS_OCN             -value`;
$NINST_OCN               = `./xmlquery NINST_OCN              -value`;
$OCN_ICE_FORCING         = `./xmlquery OCN_ICE_FORCING        -value`;

# Decomposition 
auto_decomp();

# The root directory for the perl5 required utilities 
my $perl5lib = "$CIMEROOT/utils/perl5lib";

# The Build::Config module provides utilities to access the configuration information
# The Build::Config module provides utilities to access the configuration information
# in the config_cache.xml file (see below)
(-f "$perl5lib/Build/Config.pm")  or  die <<"EOF";
** $ProgName - Cannot find perl module \"Build/Config.pm\" in directory \"$perl5lib\" **
EOF
unshift @INC, "$perl5lib";
require Build::Config;
require XML::Lite;

# Determine tracer count and which modules are active
my $NT, $ECOSYS_NT, $ZOOPLANKTON_CNT, $AUTOTROPH_CNT, $GRAZER_PREY_CNT;
my $IRF_NT, $IRF_MODE;
my $USE_IAGE, $USE_CFC, $USE_ABIO, $USE_CISO, $USE_ECOSYS, $USE_MOBY, $USE_IRF;
determine_tracer_count();

# Set up CPPDEFS
my $cppdefs = "-DCCSMCOUPLED";
set_cppdefs();

# Write configure file
my $cfg_def_file = "$SRCROOT/components/pop/bld/config_files/definition.xml";
my $cfg_cache_file = "$CASEROOT/Buildconf/popconf/config_cache.xml";
my $cfg = Build::Config->new("$cfg_def_file");

$cfg->set('ocn_grid',   $OCN_GRID);
$cfg->set('use_iage',   $USE_IAGE);
$cfg->set('use_cfc',    $USE_CFC);
$cfg->set('use_abio',   $USE_ABIO);
$cfg->set('use_ciso',   $USE_CISO);
$cfg->set('use_ecosys', $USE_ECOSYS);
$cfg->set('use_moby',   $USE_MOBY);
$cfg->set('use_irf',    $USE_IRF);
$cfg->set('irf_nt',     $IRF_NT);
$cfg->set('irf_mode',   $IRF_MODE);
$cfg->set('cppdefs',    $cppdefs);

$cfg->write_file($cfg_cache_file,"");

exit(0);

sub auto_decomp {
  # If POP_AUTO_DECOMP eq "TRUE", set POP_BLCKX, etc

  # Is only run when POP_AUTO_DECOMP == TRUE
  if ($POP_AUTO_DECOMP ne 'true') {
    return;
  }

  my $ntasks = $NTASKS_OCN / $NINST_OCN;

  chdir "$SRCROOT/components/pop/bld";
  my $config_args = `./generate_pop_decomp.pl -ccsmroot $SRCROOT -res $OCN_GRID -nproc $ntasks -thrds $NTHRDS_OCN -output all`;
  my @config = split(/\s/, $config_args);
  if ($config[0] >= 0) {
    chdir "$CASEROOT";
    $POP_BLCKX=$config[2];
    $sysmod = "./xmlchange -noecho POP_BLCKX=$POP_BLCKX";
    system($sysmod) == 0 or die "POP configure: $sysmod failed: $?\n";

    $POP_BLCKY=$config[3];
    $sysmod = "./xmlchange -noecho POP_BLCKY=$POP_BLCKY";
    system($sysmod) == 0 or die "POP configure: $sysmod failed: $?\n";

    $POP_MXBLCKS=$config[4];
    $sysmod = "./xmlchange -noecho POP_MXBLCKS=$POP_MXBLCKS";
    system($sysmod) == 0 or die "POP configure: $sysmod failed: $?\n";

    $sysmod = "./xmlchange -noecho POP_DECOMPTYPE=$config[5]";
    system($sysmod) == 0 or die "POP configure: $sysmod failed: $?\n";
    $sysmod = "./xmlchange -noecho POP_NX_BLOCKS=$config[6]";
    system($sysmod) == 0 or die "POP configure: $sysmod failed: $?\n";
    $sysmod = "./xmlchange -noecho POP_NY_BLOCKS=$config[7]";
    system($sysmod) == 0 or die "POP configure: $sysmod failed: $?\n";
  } else {
    die "POP configure: pop decomp not set for $OCN_GRID on $ntasks x  $NTHRDS_OCN procs \n";
  }

}

sub determine_tracer_count {

  $ECOSYS_NT       = 27;
  $ZOOPLANKTON_CNT = 1;
  $AUTOTROPH_CNT   = 3;
  $GRAZER_PREY_CNT = 3;
  $IRF_NT          = 0;
  $IRF_MODE        = "NK_precond";

  foreach my $module_opt ( @OCN_TRACER_MODULES_OPT ) {
    my $varname = qx{echo $module_opt | cut -f 1 -d =};
    my $value   = qx{echo $module_opt | cut -f 2 -d =};
    # no intrinsic trim() function, use regular expressions to remove whitespace
    $varname =~ s/\s+$//;
    $value   =~ s/\s+$//;
    if ( $varname eq "ECOSYS_NT" ) {
      $ECOSYS_NT = $value;
    } elsif ( $varname eq "ZOOPLANKTON_CNT" ) {
      $ZOOPLANKTON_CNT = $value;
    } elsif ( $varname eq "AUTOTROPH_CNT" ) {
      $AUTOTROPH_CNT = $value;
    } elsif ( $varname eq "GRAZER_PREY_CNT" ) {
      $GRAZER_PREY_CNT = $value;
    } elsif ( $varname eq "IRF_NT" ) {
      $IRF_NT = $value;
    } elsif ( $varname eq "IRF_MODE" ) {
      $IRF_MODE = $value;
    } else {
        die "POP configure: $varname is not a valid value in OCN_TRACER_MODULES_OPT";
    }
    print "POP configure: setting $varname = $value\n";
  }

  $USE_IAGE   = "FALSE";
  $USE_CFC    = "FALSE";
  $USE_ABIO   = "FALSE";
  $USE_CISO   = "FALSE";
  $USE_ECOSYS = "FALSE";
  $USE_MOBY   = "FALSE";
  $USE_IRF    = "FALSE";

  $NT = 2;
  foreach my $module ( @OCN_TRACER_MODULES )  {
    if ($module eq "iage" ) {
      $USE_IAGE = "TRUE";
      $NT       = $NT +  1;
    } elsif ($module eq "cfc" ) {
      $USE_CFC = "TRUE";
      $NT      = $NT +  2;
    } elsif ($module eq "abio_dic_dic14" ) {
      $USE_ABIO = "TRUE";
      $NT       = $NT +  2;
    } elsif ($module eq "ciso" ) {
      $USE_CISO = "TRUE";
      $NT       = $NT + 14;
    } elsif ($module eq "ecosys" ) {
      $USE_ECOSYS = "TRUE";
      $NT         = $NT + $ECOSYS_NT;
    } elsif ($module eq "moby" ) {
      $USE_MOBY = "TRUE";
      my $dir;
      if (-e "$CASEROOT/SourceMods/src.pop/${OCN_GRID}_data.ptracers") {
        $dir = "$CASEROOT/SourceMods/src.pop";
      } elsif (-e "$SRCROOT/components/pop/aux/moby/darwin/input/${OCN_GRID}_data.ptracers") {
        $dir = "$SRCROOT/components/pop/aux/moby/darwin/input";
      } else {
        die "POP configure: cannot find moby tracers";
      }
      my $NT_MOBY = `grep PTRACERS_numInUse $dir/${OCN_GRID}_data.ptracers | cut -f 2 -d = | cut -f 1 -d","`;
      $NT       = $NT + $NT_MOBY;
    } elsif ($module eq "IRF" ) {
      $USE_IRF = "TRUE";
      if ($IRF_NT == 0) {
        if ($IRF_MODE eq "offline_transport" && $OCN_GRID eq "gx3v7") {
          $IRF_NT = 156;
        } elsif ($IRF_MODE eq "offline_transport" && $OCN_GRID eq "gx1v6") {
          $IRF_NT = 178;
        } elsif ($IRF_MODE eq "NK_precond") {
          $IRF_NT = 36;
        } else {
          die "POP configure: $IRF_MODE is not a valid choice for IRF_MODE!";
        }
      }
      $NT      = $NT + $IRF_NT;
    } else {
      die "POP configure: $module is not a valid value in OCN_TRACER_MODULES!";
    }
  }

}

sub set_cppdefs {

  $cppdefs = "$cppdefs -DBLCKX=$POP_BLCKX";
  $cppdefs = "$cppdefs -DBLCKY=$POP_BLCKY";
  $cppdefs = "$cppdefs -DMXBLCKS=$POP_MXBLCKS";
  $cppdefs = "$cppdefs -DNT=$NT ";
  if ("$OCN_GRID" =~ /tx0.1*/ ) {$cppdefs = "$cppdefs -D_HIRES";}
  if ("$OCN_ICE_FORCING" eq 'inactive' ) {$cppdefs = "$cppdefs -DZERO_SEA_ICE_REF_SAL";}
  if ("$POP_TAVG_R8" eq 'TRUE'         ) {$cppdefs = "$cppdefs -DTAVG_R8";}
  $cppdefs = "$cppdefs -DECOSYS_NT=$ECOSYS_NT";
  $cppdefs = "$cppdefs -DZOOPLANKTON_CNT=$ZOOPLANKTON_CNT";
  $cppdefs = "$cppdefs -DAUTOTROPH_CNT=$AUTOTROPH_CNT";
  $cppdefs = "$cppdefs -DGRAZER_PREY_CNT=$GRAZER_PREY_CNT";
  $cppdefs = "$cppdefs -DIRF_NT=$IRF_NT";
    
  # write out cppdefs to env_build.xml
  # this will determine if need to rebuild at runtime - force user to call $CASE.buildexe
  chdir "$CASEROOT";
  my $sysmod = "./xmlchange -noecho -id POP_CPPDEFS -file env_build.xml -val=\'$cppdefs\'";
  system($sysmod) == 0 or die "POP configure: $sysmod failed: $?\n";

  # write out cppdefs to POP_cppdefs.new
  # this will force gmake to rebuild when $CASE.buildexe is called

  if ($TESTCASE eq 'SBN') {
      # do nothing
  } else {
      open(file,">$OBJROOT/ocn/obj/POP_cppdefs.new") or die "POP configure: Could not open file $OBJROOT/ocn/obj/POP_cppdefs.new to write";
      print file "$cppdefs \n";
      close(file);
  }
    
}

