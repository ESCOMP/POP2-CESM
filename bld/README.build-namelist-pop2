==================================
Summary
==================================

build-namelist-pop2 is invoked upon every build - AND upon every call to pop2.buildnml.csh

SYNOPSIS
     build-namelist [options]

OPTIONS
     -infile "filepath"    Specify a file containing namelists to read values from.
     -namelist "namelist"  Specify namelist settings directly on the commandline by supplying 
                           a string containing FORTRAN namelist syntax, e.g.,
                              -namelist "&pop2_nml dt=1800 /"
     -help [or -h]         Print usage to STDOUT.
     -silent [-s]          Turns on silent mode - only fatal messages issued.
     -test                 Enable checking that input datasets exist on local filesystem.
     -verbose              Turn on verbose echoing of informational messages.

The precedence for setting the values of namelist variables is (highest to lowest): 
1. namelist values set by specific command-line options, i.e. (none right now)
2. values set on the command-line using the -namelist option  
3. values read from the file specified by -infile 
4. values from the namelist defaults file - or values specifically set in build-namelist 


In pop2.buildnml.csh, build-namelist-pop2 is called as follows

  build-namelist-pop2 -infile $CASEROOT/user_nl_pop2 \
     -namelist "&popexp  log_filename='$log_filename/' " || exit -1

build-namelist-pop2 reads the file (created by pop2.cpl7.template)
  $CASEROOT/BuildConf/pop2conf/config_cache.xml file 
that currently contains only ocean grid information.
The grid resolution in config_cache.xml is used to determine appropriate
defaults for namelist input that is resolution dependent (see below).

build-namelist-pop2 depends on 2 pop2 specific files 
   $CODEROOT/ocn/pop2/bld/namelist_files/namelist_defaults.xml
   $CODEROOT/ocn/pop2/bld/namelist_files/namelist_definition.xml

Copies of thse files are also placed in $CASEROOT/Tools/Templates, in
order for the user to be able to introduce new namelist variables if that
is desired (see below)

===========================================================
namelist_definition_pop2.xml
===========================================================

The namelist definition file contains entries for all 
namelist variables that can be output by build-namelist.

Each namelist variable is defined in an <entry> element.  The
content of the element is the documentation of how the variable is
used.  Other aspects of the variable's definition are expressed as
attributes of the <entry> element.  Note that it is an XML requirement
that the attribute values are enclosed in quotes.  The attributes are:

id
     The variable's name.  *** N.B. *** The name must be lower case.
     The module convert all namelist variable names to lower case
     since Fortran is case insensitive.

group
     The namelist name (or group) that the variable is declared in.

type
     An abbreviation of the fortran declaration for the variable.
     Valid declarations are:

     char*n  
     integer
     logical
     real

     Any of these types may be followed by a comma separated list of
     integers enclosed in parenthesis to indicate an array.
 
     The current namelist validation code only distinquishes between
     string and non-string types.

    All namelist values are stored in exactly the format
    that is required in a valid namelist.  
    So if that value is a string, then
    the quotes are stored as part of the value. 

input_pathname
     Only include this attribute to indicate that the variable
     contains the pathname of an input dataset that resides in the
     CESM inputdata directory tree.  

	  The recognized values are "abs" to indicate that an absolute
     pathname is required, or "rel:var_name" to indicate that the
     pathname is relative and that the namelist variable "var_name"
     contains the absolute root directory.

category
     A category assigned for organizing the documentation.
     Currently all category values have pop2

valid_values
     This is an optional attribute that is mainly useful for variables
     that have only a small number of allowed values.

The following is an example entry from build-namelist-pop2

   <entry 
      id="nprocs_clinic" 
      type="integer" 
      category="pop2" 
      group="domain_nml" 
      valid_values="" >
      Default: ''
   </entry>

Any text that appears after the first > and before the </entry> string is used
for documentation purposes only and is ignored by build-namelist-pop2.

In build-namelist_pop2 the namelist definition file appears as follows
$nl_definition_file = ${caseroot}/Tools/Templates/namelist_definition_pop2.xml";

===========================================================
namelist_defaults_pop2.xml
===========================================================

The namelist-defaults file provides default values for variables
contained in the input namelist efinition file.  For pop2, config_cache.xml
currently provides the grid attribute value that is  relevent for the
POP2 executable for which the namelist is being produced.
This attribute is used, ALONG WITH OPTIONAL user specified attributes 
in build-namelist-pop2, to find the best match when looking for default values.

The namelist defaults file contains default values for all required namelist variables.

Note - in build-namelist_pop2 the namelist definition file appears as follows
$nl_defaults_file = "${caseroot}/Tools/Templates/namelist_defaults_pop2.xml";

The selection of the the appropriate namelist value will be the one that has the 
most type of matches. 

As an example, for the entry below - 
<ldiag_global_tracer_budgets>.true.</ldiag_global_tracer_budgets>
<ldiag_global_tracer_budgets ocn_grid="tx0.1v2">.false.</ldiag_global_tracer_budgets>

then
ldiag_global_tracer_budgets=.true., if ocn_grid is gx1v6, 
ldiag_global_tracer_budgets=.false., if ocn_grid is tx0.1v2

======================================================
User specific modifications - $CASEROOT/user_nl_pop2
======================================================

pop2.buildnml.csh now serves as simply a wrapper to the build-namelist-pop2 call. 
The call appears as follows.
build-namelist-pop2 will use the a subset CESM xml environment variables to
determine the setting of namelist variables.

$CASEROOT/Tools/Templates/build-namelist-pop2 \
  -infile $CASEROOT/user_nl_pop2 \
  -namelist "&popexp  log_filename='$log_filename/' " || exit -1

===================================
build-namelist-pop2 details
===================================

1) --- Overview of four main perl objects ---

build-namelist-pop2 has four perl objects that it uses

---- $cfg - a configuration object ----
obtained from the POP2 config_cache.xml file, which is created by
pop2.cpl7.template and resides in $CASEROOT/Builddconf/pop2conf. 
Currently this specifies only the grid resolution.

my $cfg = Build::Config->new('config_cache.xml');

---- $definition - a namelist definition object ----  
This object provides a method for verifying that the
output namelist variables are in the definition file, 
and are output in the correct namelist groups.

my $definition = Build::NamelistDefinition->new($nl_definition_file);

---- $defaults - a namelist defaults object ----   
This object provides default values for variables
contained in the namelist_definition_pop2.xml file.  

my $defaults = Build::NamelistDefaults->new($nl_defaults_file, $cfg);

---- $nl - an empty namelist object ----  
This object contains the model namelist values (where the values are
determined by the order of precedence outlined above)

my $nl = Build::Namelist->new();

2) --- Required $SCRIPTSROOT/ccsm_utils/Tools/perl5lib perl files  ---

The root directory for the perl5 required utilities 
$per5lib = ${scriptsroot}/ccsm_utils/Tools/perl5lib")

The XML::Lite module is required to parse the XML files.
$perl5lib_dir/XML/Lite.pm

The Build::Config module provides utilities to access the configuration information
in the config_cache.xml file (see below)
$perl5lib_dir/Build/Config.pm

The Build::NamelistDefinition module provides utilities to validate that the output
namelists are consistent with the namelist definition file
"$perl5lib_dir/Build/NamelistDefinition.pm

The Build::NamelistDefaults module provides a utility to obtain default values of namelist
variables based on finding a best fit with the attributes specified in the defaults file.
"$perl5lib_dir/Build/NamelistDefaults.pm"

The Build::Namelist module provides utilities to parse input namelists, to query and modify
namelists, and to write output namelists.
"$perl5lib_dir/Build/Namelist.pm" 



3) --- Creation of $nl ---

Additions to the namelist object, $nl, are made vai calls to
add_defaults, which add a value for the specified variable 
to the specified namelist object.  This method
checks the definition file and adds the variable to the correct
namelist group. 

The value can be provided by using the optional argument key 'val' in
the calling list.  Otherwise a default value is obtained from the
namelist defaults object.  If no default value is found this method
throws an exception unless the 'nofail' option is set true.

Additional optional keyword=>value pairs may be specified.  If the
keyword 'val' is not present, then any other keyword=>value pairs that
are specified will be used to match attributes in the defaults file.

The variables already in the object have the higher precedence, so if
the specified variable is already defined in the object then don't
overwrite it, just return.

Example 1: Set the default value for namelist variable $var, using only
           the ocn_grid value in the config_cache.xml file

           add_default($nl, $var, 'val'=>$val)
           add_default($nl, 'ew_boundary_type');

Example 2: Set the default value $val for the namelist variable $var, 
           object $nl:

           add_default($nl, $var, 'val'=>$val)
           add_default($nl, 'clinic_distribution_type', 'val'=>"$decomptype");

Example 3: Set the default value for namelist variable $var, using the 
	   "ocn_grid" value in the config_cache.xml file - plus other attributes
           defined by additional keyword=>value pairs.

	   add_default($nl, 'keyword'=>$value
	   add_default($nl, 'bckgrnd_vdc1', 
	                    'lhoriz_varying_bckgrnd'=>"$lhoriz_varying_bckgrnd", 
       	                    'ltidal_mixing'=>"$ltidal_mixing");
     
           Note - it is assumed that the namelist_defaults_pop2.xml file
           has matching rules for the above attributes. As an example:

  
           <bckgrnd_vdc1 ocn_grid="gx3v7" lhoriz_varying_bckgrnd=".true."  ltidal_mixing=".true." >0.16 </bckgrnd_vdc1>  
           <bckgrnd_vdc2 ocn_grid="gx3v7" lhoriz_varying_bckgrnd=".true."  ltidal_mixing=".true." >0.0  </bckgrnd_vdc2>  
           <bckgrnd_vdc1 ocn_grid="gx3v7" lhoriz_varying_bckgrnd=".false." ltidal_mixing=".false.">0.524</bckgrnd_vdc1>  
           <bckgrnd_vdc2 ocn_grid="gx3v7" lhoriz_varying_bckgrnd=".false." ltidal_mixing=".false.">0.313</bckgrnd_vdc2>  

Example 4: Add a default for variable $var if an appropriate value is found.  
           Otherwise DO NOT add the variable

           add_default($nl, $var, 'nofail'=>1)

           For pop2, this would be the case if datasets are available for only a subset of grids - e.g.tidal_energy_files only
           exists for gx3v7 and gx1v6 grids 

             <tidal_energy_file ocn_grid="gx3v7">ocn/pop/gx3v7/forcing/tidal_energy_gx3v7_20100107.ieeer8</tidal_energy_file>
             <tidal_energy_file ocn_grid="gx1v6">ocn/pop/gx1v6/forcing/tidal_energy_gx1v6_20090205.ieeer8</tidal_energy_file>

	   in build-namelist-pop2 if the following was invoked

              add_default($nl, 'tidal_energy_file')

           then build-namelist-pop2 would fail for any grids other than gx3v7 and gx1v6.
	   However, if the following call is made in build-namelist-pop2
 
              add_default($nl, 'tidal_energy_file', 'nofail'=>1)
 
           then the namelist entry tidal_energy_file simply does not appear for any grids other
           than gx3v7 and gx1v6
 
3) Writing out the user namelist


4) Passive tracers


5) Tavg history contents


===================================
POP2 Use Cases
===================================

1) Adding a user case-specific namelist variable change

   As an example, the user wants to change the default value of 
   dt_count from 23 to 46, and the default value of 
   bckgrnd_vdc from 0.1 to 0.3.
   The file $CASEROOT/user_nl_pop2 would then look as follows

     &pop2_inparm 
      dt_count = 46
      bckgrnd_vdc = 0.3
      / 

   Note the following
   - the  namelist name, pop2_inparm, is ignored as a valid namelist name (or group)
   - ALL user modified namelist variables, even if they are in different namelists, 
     need to be added to pop2_inparm (as shown above)

2) Changing the default values of a namelist for all cases.
   
   Modify the $CODEROOT/ocn/pop2/bld/namelist_defaults_pop2.xml file accordingly. 

   As an example, changing
   
      <bckgrnd_vdc_dpth ocn_grid="gx1v6"  > 1000.0e02 </bckgrnd_vdc_dpth>

   to

      <bckgrnd_vdc_dpth ocn_grid="gx1v6"  > 2000.0e02 </bckgrnd_vdc_dpth>
   
   would result in the following new default setting in pop2_in.

     bckgrnd_vdc_dpth = 2000.0e02 

2b) Changing the default values of streams associated with an existing
passive tracer

stream variables can be changed by simply adding new variables to user_nl_pop2


3) Adding a new pop2 namelist variables for a given case 
   (with associated source code mods in $CASEROOT/SourceMods/src.pop2) 

  3a) Add the new variable definition block in 
      $CASEROOT/Tools/Templates/namelist_definition_pop2.xml
      call the new variable, pop2varnew, and its value, pop2valnew
  3b) Add a new call for the variable in 
      $CASEROOT/Tools/Templates/build-namelist_pop2
      add_default($nl, 'pop2varnew', 'val'=>'pop2varnew');
   

4) Changing the contents of $res_tavg_contents

- build-namelist-pop2 creates the ${ocn_grid}_tavg_contents file
in $EXEROOT/ocn/input/${ocn_grid}_tavg_contents file
to change the contents of this file 
- create a tavg contents file for every tracer in pop2conf
unless there is already a file in SourceMods/src.pop2 - at which
point copy it into pop2conf (need to implement this)



5) Adding a new passive tracer






6) TODOs
- mention new cpp variable NT
- summarize logic of all cpp variables 
